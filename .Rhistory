seq.delta <- c(0.0001,0.001,0.01)
seq.phi <- seq(0,0.4, 0.05)
par.grid <- expand.grid(delta=seq.delta, phi=seq.phi)
seq.phi <- seq(0,0.4, 0.05)
exit
seq.phi <- seq(0,0.4, 0.02)
seq.phi <- seq(0,0.4, 0.01)
seq.phi <- seq(0,0.4, 0.02)
seq.phi <- seq(0,0.3, 0.02)
seq.delta <- c(0.0001)
seq.phi <- seq(0,0.36, 0.02)
par.grid <- expand.grid(delta=seq.delta, phi=seq.phi)
View(par.grid)
install.packages(c('repr', 'IRdisplay', 'crayon', 'pbdZMQ', 'devtools'))
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
install.packages("curl")
install.packages("curl")
devtools::install_github('IRkernel/IRkernel')
install.packages("httr")
install.packages("httr")
devtools::install_github('IRkernel/IRkernel')
install.packages("Rcurl")
install.packages("RCurl")
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
install.packages("curl")
install.packages("curl")
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
install.packages(c("curl", "httr"))
install.packages(c("curl", "httr"))
file.edit('~/.Renviron')
devtools::install_github('IRkernel/IRkernel')
file.edit('~/.Renviron')
devtools::install_github('IRkernel/IRkernel')
library(kernlab)
install.packages("kernlab")
library(kernlab)
rbfkernel <- rbfdot(sigma = 0.1)
rbfkernel
kpar(rbfkernel)
x <- rnorm(10)
y <- rnorm(10)
rbfkernel(x,y)
x
y
rbfkernel(x)
rbfkernel(y)
rbfkernel(x,y)
kernel.dotted <- function(x1,x2) {
rbf <- rbfdot(sigma = 0.1)
return(rbf(x1,x1)-2*rbf(x1,x2)+rbf(x2,x2))
}
data <- iris
data <- data[sample(nrow(data)),0]
data
data <- iris
data <- data[sample(nrow(data)),]
data
training <- data[1:100,]
testin <- data[101:nrow(data),]
testing <- data[101:nrow(data),]
training <- data[1:100,]
testing <- data[101:nrow(data),]
apply(testing, 1, function(x) {
dists <- apply(training,1, function(tr) {
sqrt(sum((x-tr)^2))
})
browser()
})
apply(testing, 1, function(x) {
dists <- apply(training, 1, function(tr) {
browser()
sqrt(sum((x-tr)^2))
})
# browser()
})
testing <- data[101:nrow(data),1:4]
testing
library(kernlab)
data <- iris
kernel.dotted <- function(x1,x2) {
rbf <- rbfdot(sigma = 0.1)
return(rbf(x1,x1)-2*rbf(x1,x2)+rbf(x2,x2))
}
k <- 3
data <- data[sample(nrow(data)),]
library(kernlab)
data <- iris
kernel.dotted <- function(x1,x2) {
rbf <- rbfdot(sigma = 0.1)
return(rbf(x1,x1)-2*rbf(x1,x2)+rbf(x2,x2))
}
k <- 3
data <- data[sample(nrow(data)),]
training <- data[1:100,]
testing <- data[101:nrow(data),1:4]
apply(testing, 1, function(x) {
dists <- apply(training, 1, function(tr) {
browser()
sqrt(sum((x-tr[1:4])^2))
})
# browser()
})
sqrt(sum((x-tr[1:4])^2))
tr[1:4]
x
apply(testing, 1, function(x) {
dists <- apply(training, 1, function(tr) {
x_ <- as.numeric(tr[1:4])
sqrt(sum((x-x_)^2))
})
browser()
})
dists
order(dists)
statmod <- function(x) {
z <- table(as.vector(x)) names(z)[z == max(z)]
}
statmod <- function(x) {
z <- table(as.vector(x)) names(z)[z == max(z)]
}
statmod <- function(x) {
return(table(as.vector(x)) names(z)[z == max(z)])
}
statmod <- function(x) {
z <- table(as.vector(x))
names(z)[z == max(z)]
}
apply(testing, 1, function(x) {
dists <- apply(training, 1, function(tr) {
x_ <- as.numeric(tr[1:4])
sqrt(sum((x-x_)^2))
})
statmod(training[order(dists)],5)
})
apply(testing, 1, function(x) {
dists <- apply(training, 1, function(tr) {
x_ <- as.numeric(tr[1:4])
sqrt(sum((x-x_)^2))
})
statmod(training[order(dists),5])
})
apply(testing, 1, function(x) {
dists <- apply(training, 1, function(tr) {
x_ <- as.numeric(tr[1:4])
sqrt(sum((x-x_)^2))
})
statmod(training[order(dists),5][1:k])
})
resp1 <- apply(testing, 1, function(x) {
dists <- apply(training, 1, function(tr) {
x_ <- as.numeric(tr[1:4])
sqrt(sum((x-x_)^2))
})
statmod(training[order(dists),5][1:k])
})
conf1 <- table(observed=data[101:nrow(data),5], predicted=resp1)
conf1
resp2 <- apply(testing, 1, function(x) {
dists <- apply(training, 1, function(tr) {
x_ <- as.numeric(tr[1:4])
kernel.dotted(x,x_)
})
statmod(training[order(dists),5][1:k])
})
conf2 <- table(observed=data[101:nrow(data),5], predicted=resp2)
conf2
conf1
knl <- compiler::cmpfun(kernel.dotted)
resp2 <- apply(testing, 1, function(x) {
dists <- apply(training, 1, function(tr) {
x_ <- as.numeric(tr[1:4])
knl(x,x_)
})
statmod(training[order(dists),5][1:k])
})
conf2 <- table(observed=data[101:nrow(data),5], predicted=resp2)
resp1 <- apply(testing, 1, function(x) {
dists <- apply(training, 1, function(tr) {
x_ <- as.numeric(tr[1:4])
sqrt(sum((x-x_)^2))
})
statmod(training[order(dists),5][1:k])
})
conf1 <- table(observed=data[101:nrow(data),5], predicted=resp1)
conf2
k <- 3
k <- 4
data <- data[sample(nrow(data)),]
training <- data[1:100,]
testing <- data[101:nrow(data),1:4]
resp1 <- apply(testing, 1, function(x) {
dists <- apply(training, 1, function(tr) {
x_ <- as.numeric(tr[1:4])
sqrt(sum((x-x_)^2))
})
statmod(training[order(dists),5][1:k])
})
conf1 <- table(observed=data[101:nrow(data),5], predicted=resp1)
resp2 <- apply(testing, 1, function(x) {
dists <- apply(training, 1, function(tr) {
x_ <- as.numeric(tr[1:4])
knl(x,x_)
})
statmod(training[order(dists),5][1:k])
})
conf2 <- table(observed=data[101:nrow(data),5], predicted=resp2)
conf1
k <- 3
data <- data[sample(nrow(data)),]
training <- data[1:100,]
testing <- data[101:nrow(data),1:4]
resp1 <- apply(testing, 1, function(x) {
dists <- apply(training, 1, function(tr) {
x_ <- as.numeric(tr[1:4])
sqrt(sum((x-x_)^2))
})
statmod(training[order(dists),5][1:k])
})
conf1 <- table(observed=data[101:nrow(data),5], predicted=resp1)
resp2 <- apply(testing, 1, function(x) {
dists <- apply(training, 1, function(tr) {
x_ <- as.numeric(tr[1:4])
knl(x,x_)
})
statmod(training[order(dists),5][1:k])
})
conf2 <- table(observed=data[101:nrow(data),5], predicted=resp2)
conf2
conf1
source('~/MEGA/Experimentos/exp_MT_benchmarks/plot_andro/plot_convergence_andro.R')
dataset <- read.csv("~/Desktop/FITNIR_nooutliers_FULL.csv")
2313/4
View(dataset)
View(dataset)
nrow(dataset)
nrow(dataset)/4
dataset[1:5, c(2310,2312)]
dataset[1:12, c(2310,2312)]
seq(1, nrow(dataset)+1,5)
seq(1, nrow(dataset)+2,5)
seq(1, nrow(dataset),5)
seq(1, nrow(dataset)+1,4)
interv <- seq(1, nrow(dataset)+1,4)
dataset <<- read.csv("~/Desktop/FITNIR_nooutliers_FULL.csv")
transf <- apply(interv,1, function(x) {
mean(dataset[x:(x+3),])
})
dim(x)
transf <- apply(interv,2, function(x) {
mean(dataset[x:(x+3),])
})
transf <- sapply(interv, function(x) {
mean(dataset[x:(x+3),])
})
warnings()
1:4
transf <- sapply(interv, function(x) {
colMeans(dataset[x:(x+3),])
})
View(transf)
interv <- seq(1, nrow(dataset)+1,4)
transf <- apply(t(interv), 1, function(x) {
colMeans(dataset[x:(x+3),])
})
transformed <- dataset[0,]
transformed
source('~/Desktop/preprocessNIR.R')
source('~/Desktop/preprocessNIR.R')
View(transformed)
colnames(transformed) <- colnames(dataset)
transformed
transformed[1:4, 2310:2313]
dataset[1:4, 2310:2313]
dataset[5:8, 2310:2313]
write.csv(transformed, "~/Desktop/NIRWB_means.csv", row.names = F)
dataset <- read.csv("~/Desktop/NIRWB_means.csv")
View(dataset)
training.test <- transformed[1:200,]
testing.set <- transformed[201:nrow(transformed),]
source('~/Desktop/preprocessNIR.R')
1164/4
tail(transformed,2)
View(tail(transformed,2))
seq(1, nrow(dataset),4)
source('~/Desktop/preprocessNIR.R')
seq(0,0.07, 0.001)
seq(0,0.07, 0.001)
seq(0,0.07, 0.001)
seq(0,0.07, 0.002)
dataset.path <- "~/MEGA/Experimentos/exp_NIRWBMeans/datasets/"
d.training <- "NIRWB_means_training"
d.testing <- "NIRWB_means_testing"
data.training <- read.csv(paste0(dataset.path, d.training))
dataset.path <- "~/MEGA/Experimentos/exp_NIRWBMeans/datasets/"
d.training <- "NIRWB_means_training.csv"
d.testing <- "NIRWB_means_testing.csv"
data.training <- read.csv(paste0(dataset.path, d.training))
data.testing <- read.csv(paste0(dataset.path, d.testing))
pca.m <- prcomp(data.training, center = TRUE, scale. = TRUE, rank = 100)
pca.m <- prcomp(data.training, center = TRUE, scale. = TRUE, rank. = 100)
summar]
summary(pca.m)
pca.m$sdev
pca.m$center
pca.m$scale
summary(pca.m)[1]
summary(pca.m)[[1]]
summary(pca.m)
View(pca.m$x)
transf.data.training <- pca.m$x[,1:27]
View(transf.data.training)
tranf.data.testing <- predict.prcomp(pca.m, data.testing)[,1:27]
tranf.data.testing <- predict(pca.m, data.testing)[,1:27]
pca.m <- prcomp(data.training, center = TRUE, scale. = TRUE)
summary(pca.m)
pca.m <- prcomp(data.training, center = TRUE, scale. = TRUE, rank. = 10)
summary(pca.m)
summary(pca.m)
View(data.training)
tail(data.training[,1:(ncol(data.training)-num.targets)], 20)
num.targets <- 6
data.training[,1:(ncol(data.training)-num.targets)]
tail(data.training[,1:(ncol(data.training)-num.targets)], 20)
tail(colnames(data.training[,1:(ncol(data.training)-num.targets)]), 20)
tail(colnames(data.training[,1:(ncol(data.training)-num.targets-1)]), 20)
tail(colnames(data.training[,1:(ncol(data.training)-num.targets-2)]), 20)
tail(colnames(data.training[,1:(ncol(data.training)-num.targets+1)]), 20)
dataset.path <- "~/MEGA/Experimentos/exp_NIRWBMeans/datasets/"
output.path <- "~/MEGA/Experimentos/exp_NIRWBMeans/datasets/"
d.training <- "NIRWB_means_training"
d.testing <- "NIRWB_means_testing"
num.targets <- 6
data.training <- data.training[,1:(ncol(data.training)-num.targets)]
data.testing <- data.testing[,1:(ncol(data.testing)-num.targets)]
data.training <- read.csv(paste0(dataset.path, d.training, ".csv"))
data.testing <- read.csv(paste0(dataset.path, d.testing, ".csv"))
pca.m <- prcomp(data.training, center = TRUE, scale. = TRUE)
summary(pca.m)
tail(colnames(data.training))
tail(colnames(data.training),10)
dataset.path <- "~/MEGA/Experimentos/exp_NIRWBMeans/datasets/"
output.path <- "~/MEGA/Experimentos/exp_NIRWBMeans/datasets/"
d.training <- "NIRWB_means_training"
d.testing <- "NIRWB_means_testing"
num.targets <- 6
data.training <- read.csv(paste0(dataset.path, d.training, ".csv"))
data.testing <- read.csv(paste0(dataset.path, d.testing, ".csv"))
data.training <- data.training[,1:(ncol(data.training)-num.targets)]
data.testing <- data.testing[,1:(ncol(data.testing)-num.targets)]
pca.m <- prcomp(data.training, center = TRUE, scale. = TRUE)
summary(pca.m)
source('~/gdrive/Mestrado/Toolkit_MT/PRODUCTION_LINE/pca_extractor.R')
source('~/gdrive/Mestrado/Toolkit_MT/PRODUCTION_LINE/pca_extractor.R')
source('~/gdrive/Mestrado/Toolkit_MT/PRODUCTION_LINE/pca_extractor.R')
source('~/gdrive/Mestrado/Toolkit_MT/PRODUCTION_LINE/pca_extractor.R')
(ncol(data.training)-num.targets):ncol(data.training)
dataset.path <- "~/MEGA/Experimentos/exp_NIRWBMeans/datasets/"
output.path <- "~/MEGA/Experimentos/exp_NIRWBMeans/datasets/"
d.training <- "NIRWB_means_training"
d.testing <- "NIRWB_means_testing"
num.targets <- 6
data.training <- read.csv(paste0(dataset.path, d.training, ".csv"))
data.testing <- read.csv(paste0(dataset.path, d.testing, ".csv"))
t.training <- data.training[,(ncol(data.training)-num.targets):ncol(data.training)]
View(t.training)
t.training <- data.training[,(ncol(data.training)-num.targets-1):ncol(data.training)]
t.training <- data.training[,(ncol(data.training)-num.targets+1):ncol(data.training)]
View(t.training)
t.testing <- data.testing[,(ncol(data.testing)-num.targets+1):ncol(data.testing)]
View(t.testing)
source('~/gdrive/Mestrado/Toolkit_MT/PRODUCTION_LINE/pca_extractor.R')
length(bases)
bases <- NULL
length(bases)
0.0
0.2
str(0.2)
toString(0.2)
bases <- c("NIRWB_means_training_PCA")
bases.teste <- NULL
n.targets <- c(6)
techs <- c("parrf","svm","ridge")
folds.num <- 10
datasets.folder <- "~/MEGA/Experimentos/exp_NIRWBMeans/datasets"
output.dir.prefix <- "~/Desktop/TUNE_DSTARS_NIRWB_MEANS_PCA"
seed <- 5465
seq.delta <- c(0.0001)
seq.phi <- seq(0,1, 0.2)
par.grid <- expand.grid(delta=seq.delta, phi=seq.phi)
View(par.grid)
i = 1
d <- par.grid[i,1]
p <- par.grid[i,2]
output.dir.dstars <- paste0(output.dir.prefix, "/tuning/Delta", toString(d), "Phi", toString(p))
dstars.delta <- d
dstars.phi <- p
set.seed(seed)
tech
techs
for(tech in techs) {print(tech)}
data <- read.csv("MEGA/Experimentos/exp_NIRWBMeans/datasets/NIRWB_means_training_PCA.csv")
oth <- data[,24:29]
oth
write.csv(oth, "~/Desktop/coor.csv", row.names = F)
dataset <- read.csv("~/MEGA/Experimentos/exp_NIRWBMeans/datasets/NIRWB_means_training_PCA.csv")
n.targets <- 6
n.folds <- 10
log.RMSE <- data.frame(matrix(nrow=n.folds, ncol=n.targets))
colnames(log.RMSE) <- colnames(dataset)[(ncol(dataset)-n.targets):ncol(dataset)]
n.targets <- 6
n.folds <- 10
log.RMSE <- data.frame(matrix(nrow=n.folds, ncol=n.targets))
colnames(log.RMSE) <- colnames(dataset)[(ncol(dataset)-n.targets+1):ncol(dataset)]
View(log.RMSE)
targets <- colnames(log.RMSE)
maxs <- apply(dataset[,targets], 2, max)
mins <- apply(dataset[,targets], 2, min)
denormalized.log <- data.frame(matrix(nrow = 0, ncol = n.targets))
denormalized.log
colnames(denormalized.log) <- targets
denormalized.log
dataset.name <- "NIRWB_means_training_PCA"
dataset.folder <- "~/MEGA/Experimentos/exp_NIRWBMeans/datasets/"
paste0(dataset.folder, "/",dataset.name,".csv")
dataset.name <- "NIRWB_means_training_PCA"
dataset.folder <- "~/MEGA/Experimentos/exp_NIRWBMeans/datasets"
paste0(dataset.folder, "/",dataset.name,".csv")
i = 1
tech = "parrf"
mt = "ST"
paste0(log.folder,"/", mt, "/prediction_logs/", tech, "/predictions_", mt, "_", dataset.name, "_fold", formatC(i, width=2, flag="0"), ".csv")
log.folder <- "~/MEGA/Experimentos/exp_NIRWBMeans/resultsCV/PCA"
paste0(log.folder,"/", mt, "/prediction_logs/", tech, "/predictions_", mt, "_", dataset.name, "_fold", formatC(i, width=2, flag="0"), ".csv")
mt = "DSTARS"
paste0(log.folder,"/", mt, "/output_logs/testing_final_logs/", dataset.name, "_", tech, "_testing_final_predictions_fold", formatC(i, width=2, flag="0"), ".csv")
maxs
mins
source('~/gdrive/Mestrado/Toolkit_MT/PRODUCTION_LINE/DEnormalize.R')
log.RMSE
r
log
t
targets
colnames(colnames(dataset)[(ncol(dataset)-n.targets+1):ncol(dataset)])
paste0(dataset.folder, "/",dataset.name,".csv")
dataset
targets <- colnames(dataset)[(ncol(dataset)-n.targets+1):ncol(dataset)]
targets
source('~/gdrive/Mestrado/Toolkit_MT/PRODUCTION_LINE/DEnormalize.R')
log.RMSE
colMeans(log.RMSE)
source('~/gdrive/Mestrado/Toolkit_MT/PRODUCTION_LINE/DEnormalize.R')
log.RMSE
n.folds
log.RMSE.CV <- data.frame(matrix(nrow=n.folds, ncol=n.targets))
log.RMSE.CV
source('~/gdrive/Mestrado/Toolkit_MT/PRODUCTION_LINE/DEnormalize.R')
log.RMSE.CV
log.RMSE.CV[n.folds+1,] <- colMeans(log.RMSE)
log.RMSE.CV[n.folds+1,] <- colMeans(log.RMSE.CV)
log.RMSE.CV
denormalized.log <- data.frame(rep(NA, 0), matrix(nrow = 0, ncol = n.targets))
denormalized.log
colnames(denormalized.log) <- c("tech",targets)
denormalized.log
denormalized.log <- data.frame(rep(NA, 0), matrix(nrow = 0, ncol = n.targets), stringsAsFactors = F)
colnames(denormalized.log) <- c("tech",targets)
denormalized.log
source('~/gdrive/Mestrado/Toolkit_MT/PRODUCTION_LINE/DEnormalize.R')
View(denormalized.log)
source('~/gdrive/Mestrado/Toolkit_MT/PRODUCTION_LINE/DEnormalize.R')
View(denormalized.log)
source('~/gdrive/Mestrado/Toolkit_MT/PRODUCTION_LINE/DEnormalize.R')
View(denormalized.log)
View(denormalized.log)
source('~/gdrive/Mestrado/Toolkit_MT/PRODUCTION_LINE/DEnormalize.R')
source('~/gdrive/Mestrado/Toolkit_MT/PRODUCTION_LINE/DEnormalize.R')
source('~/gdrive/Mestrado/Toolkit_MT/PRODUCTION_LINE/DEnormalize.R')
source('~/gdrive/Mestrado/Toolkit_MT/PRODUCTION_LINE/DEnormalize.R')
View(denormalized.log)
write.csv(denormalized.log, "~/Desktop/DENORM.csv", row.names = F)
source('~/gdrive/Mestrado/Toolkit_MT/PRODUCTION_LINE/DEnormalize.R')
source('~/gdrive/Mestrado/Toolkit_MT/PRODUCTION_LINE/DEnormalize.R')
source('~/gdrive/Mestrado/Toolkit_MT/PRODUCTION_LINE/DEnormalize.R')
setwd("~/gdrive/Mestrado/Toolkit_MT/PRODUCTION_LINE")
source('~/gdrive/Mestrado/Toolkit_MT/PRODUCTION_LINE/run_exp.R')
modelling.idx
round(nrow(dataset))/folds.num
nrow(modelling.set.x)/n.folds.tracking
round(nrow(modelling.set.x)/n.folds.tracking)
as.numeric(rownames(modelling.set.x[((k-1)*len.fold.tuning + 1):(ifelse(k==n.folds.tracking, nrow(modelling.set.x), k*len.fold.tuning)),]))
rownames(modelling.set.x[((k-1)*len.fold.tuning + 1):(ifelse(k==n.folds.tracking, nrow(modelling.set.x), k*len.fold.tuning)),])
k
nrow(modelling.set.x)
k*len.fold.tuning
modelling.set.x[((k-1)*len.fold.tuning + 1):(ifelse(k==n.folds.tracking, nrow(modelling.set.x), k*len.fold.tuning)),]
((k-1)*len.fold.tuning + 1):(ifelse(k==n.folds.tracking, nrow(modelling.set.x), k*len.fold.tuning))
10*3
10*4
4*9
3*9
36/5
8*5
8*4
