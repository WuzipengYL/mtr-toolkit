// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// prototype
NumericVector prototype(NumericMatrix X);
RcppExport SEXP _mtrToolkit_prototype(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(prototype(X));
    return rcpp_result_gen;
END_RCPP
}
// col_vars
NumericVector col_vars(NumericMatrix X);
RcppExport SEXP _mtrToolkit_col_vars(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(col_vars(X));
    return rcpp_result_gen;
END_RCPP
}
// variance
double variance(NumericMatrix X);
RcppExport SEXP _mtrToolkit_variance(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(variance(X));
    return rcpp_result_gen;
END_RCPP
}
// homogeneity
double homogeneity(NumericMatrix X);
RcppExport SEXP _mtrToolkit_homogeneity(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(homogeneity(X));
    return rcpp_result_gen;
END_RCPP
}
// euclideanDist
double euclideanDist(NumericVector x, NumericVector y);
RcppExport SEXP _mtrToolkit_euclideanDist(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(euclideanDist(x, y));
    return rcpp_result_gen;
END_RCPP
}
// calcEuclideanDist
NumericVector calcEuclideanDist(NumericMatrix x, NumericVector centroid);
RcppExport SEXP _mtrToolkit_calcEuclideanDist(SEXP xSEXP, SEXP centroidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type centroid(centroidSEXP);
    rcpp_result_gen = Rcpp::wrap(calcEuclideanDist(x, centroid));
    return rcpp_result_gen;
END_RCPP
}
// best_split
List best_split(NumericVector attr, NumericMatrix Y, double actual_var, NumericVector actual_prot, double ftest_signf);
RcppExport SEXP _mtrToolkit_best_split(SEXP attrSEXP, SEXP YSEXP, SEXP actual_varSEXP, SEXP actual_protSEXP, SEXP ftest_signfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type actual_var(actual_varSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type actual_prot(actual_protSEXP);
    Rcpp::traits::input_parameter< double >::type ftest_signf(ftest_signfSEXP);
    rcpp_result_gen = Rcpp::wrap(best_split(attr, Y, actual_var, actual_prot, ftest_signf));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mtrToolkit_prototype", (DL_FUNC) &_mtrToolkit_prototype, 1},
    {"_mtrToolkit_col_vars", (DL_FUNC) &_mtrToolkit_col_vars, 1},
    {"_mtrToolkit_variance", (DL_FUNC) &_mtrToolkit_variance, 1},
    {"_mtrToolkit_homogeneity", (DL_FUNC) &_mtrToolkit_homogeneity, 1},
    {"_mtrToolkit_euclideanDist", (DL_FUNC) &_mtrToolkit_euclideanDist, 2},
    {"_mtrToolkit_calcEuclideanDist", (DL_FUNC) &_mtrToolkit_calcEuclideanDist, 2},
    {"_mtrToolkit_best_split", (DL_FUNC) &_mtrToolkit_best_split, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_mtrToolkit(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
